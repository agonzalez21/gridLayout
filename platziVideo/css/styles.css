body{
    font-family: Arial, Helvetica, sans-serif;
    margin: 0;
}

p,figure{
    margin: 0;
}

.content{
    background: red;
    display: grid;
    height: 100vh;
    grid-template: auto 40% / 22% auto 45%;
    /* grid-auto-flow: column; */
    /* grid-template-areas: "menu multimedia"; */
}

.menu{
    /* background: rgb(23,27,46); */
    display: grid;
    /* grid-template-rows: [logo] 80px [myplaylist] 1fr [friendsplaylist] 1fr; */
    /* grid-template-rows: repeat(auto-fill); */
    background-color: #171a2f;
    color: white;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    /* height: 100vh; */
    grid-row: 1 / span 2;
    font-size:15px;
    max-height: 100vh;
    /* grid-template-areas: "logo myplaylist friendsplaylist" */
}

.video{
    background: darkblue;
    grid-column: 2 / span 2;
    display: grid;
    grid-template-rows: 75% 25%;
}

.video-detalles{
    background: white;
    display: grid;
    grid-template: 15% 15% 30% 35% 5% / repeat(7, 1fr);
}

.nombre-video, .vistas-video{
    grid-column: 1 / span 7;
} 

button{
    color: white;
    margin: 7px;
    border-radius:5px;
    border:none;
}

hr {
    height: 1px;
    width: 100%;
    border: 0;
    background-color: black;
    margin: 0;
    grid-column: 1 / span 7;
    align-self: flex-start;
  }

.agregar{
    background: darkred;
    grid-row: 3 / span 2;
}

.electronica{
    background: #171a2f;
    grid-row: 3/ span 2;
    grid-column: 4;
    /* grid-row: 3 / span 2; */
}

.rock{
    background: darkmagenta;
    grid-row: 3 / span 2;
    grid-column: 5;
    /* grid-row: 4 / span 2; */
}

.ochentas{
    background: darkkhaki;
    grid-row: 3 / span 2;
    grid-column: 6;
    /* grid-row: 3 / span 2; */
}

.relacionado{
    background: rgba(64, 153, 94, 0.596);
    grid-row: 3 / span 2;
    grid-column: 7;
    /* grid-row: 3 / span 2; */
}

.imagen-compartir{
    height: 20px;
    width: 20px;
    justify-self: center;
    align-self:flex-end;
    /* margin-top: 15px;
    align-self: initial;
    justify-self: center; */
}

.compartir{
    font-size: 15px;
    grid-column: 2;
    /* margin-top: -45px; */
    justify-self: center;
}

.imagen-guardar {
    height: 20px;
    width: 20px;
    grid-row: 3;
    justify-self: center;
    align-self:flex-end;
    grid-column:3;
    margin-bottom: 5px;
}
/* margin-top: 10px;
align-self: initial;
justify-self: center; */
/* grid-column: 3;
grid-row: 3; */

.guardar{
    font-size: 15px;
    grid-column: 3;
    /* margin-top: -45px; */
    justify-self:center;
}

.logo{
    margin: 0px;
}

.logo img{
    height: 60px;

}

.titulo-playlist{
    margin: 0px 0px 0px 10px;
}

.myplaylist{
    margin: 5px 0px;
    margin-bottom: 15px;
    display:grid;
    grid-template: repeat(10, auto) / 30px auto;
    grid-row-gap: 6px;
    /* border: 1px solid yellow; */
    /* grid-template: repeat(10, 1fr) / 30px auto; */
}

.numero-playlist{
    align-self:initial;
    justify-self: center;
}

.cancion-playlist{
    margin-right: 15px;
}

.friendsplaylist{
    margin: 15px 0px;
    display: grid;
    grid-template: repeat(5,auto) / 50px auto;
    grid-row-gap: 6px;
    /* border: 1px solid pink; */
}

.figura-usuario, .figura-usuario img{
    height: 25px;
    width:25px;
    justify-self: center;
    align-self: center;   
}

/* .figura-usuario img{
    height: 25px;
    width:25px;
    justify-self: center;   
} */

/* .figura-usuario img{
    height: 25px;
    width:25px;
    justify-self: center;
} */

.nombre-usuario{
    align-self:center;
    justify-self: start;
    margin: -5px 0px 0px 10px;
}

.comentarios{
    /* background: rgba(55,55, 55, .5);     */
    background: white;
    color: darkgrey;
    display: grid;
    grid-template: repeat(6, 1fr) / 10% 90% ;
    grid-gap: 5px;
    margin-bottom: 5px;
}

.titulo-comentarios{
    grid-column: 1 / span 2;
    margin-left:10px;
    align-self: center;
}

.agrega-comentario-conteiner{
    background: rgb(242, 242, 242);
    grid-row: 2;
    grid-column: 1 / span 2;
    display: flex;
    justify-content: flex-start;
    /* flex-wrap: wrap; */
}

.agrega-comentario-conteiner figure {
    margin: 5px 0px 5px 10px;
    /* margin-left: 10px;
    margin-top: 5px; */
}

.agrega-comentario-conteiner p{
    margin-left: 15px;
    align-self: center;
}

.sugerencias{
    background:darkolivegreen;
}






/*

CREAR COLUMNAS
grid-template-columns: 200px 200px 200px: -> Crea columnas de 200px.
grid-template-columns: 25% 50% 25%; -> Combina las columnas con los tamaños especificados.

CREAR FILAS
grid-template-rows: 300 px 300px;

CREAR FILAS Y COLUMNAS
grid-template: filas / columnas;
 
TIPOS DE DISPLAYS 
overflow: auto; //Crea un scrol automático
*/

/* Obtiene el item especificado
.item:nth-of-type(4){
    background: blue;
} 

//ESPACIAO ENTRE FILAS Y COLUMNAS
grid-row-gap: 30px;
grid-column-gap: 20px;
grid-gap: filas / columnas; EJ:
grid-gap: 10px 100px;

//REPETIDORES, UNIDADES DE MEDIDA Y FUNCIONES
grid-template: 300px 100px 100px / 1fr 1fr 1fr; -> Fracciones que se traducen en porcentajes.
grid-template: 300px 100px 100px / auto auto auto; -> Distrubuye el espacio de la columna, pero con referencia a su contenido.
grid-template: 300px 100px 100px / repeat(3,1fr); -> Duplica lo que se le especifica.
grid-template: 300px 100px 100px / repeat(3,minmax(200px,1fr)); -> Especifica el mínimo y el máximo de las columnas.
grid-template: 300px 100px 100px / minmax(200px, 1fr) 1fr 1fr 1fr;

//DEFINIENDO ÁREAS DE CONTENIDO
height: 100vh;
grid-template: repeat(3, 1fr) / 200px 1fr;
grid-template-areas: "header" "left contenido" "footer"; -> Crea las áreas.
grid-template-areas: "header header" "left contenido" "footer footer"; -> Crea las áreas.

Propieades agregadas a los hijos del container
.header{
    grid-area: header;
}

.left{
    grid-area: left;
}

.contenido{
    grid-area: contenido;
}

.footer{
    grid-area: footer;
}

//DEFINIENDO EL TAMAÑO DE LAS COLUMNAS DENTRO DE UN GRID.
.item:nth-of-type(1){
    grid-column-start:1;
    grid-column-end: 3; -> Se le especifica en qué linea va a terminar, no cuántas columnas va a ocupar.

}

.item:nth-of-type(8){
    grid-column: 2 / 4; -> Se especifica en que columna empezar y en cuál terminar.
}

.item:nth-of-type(7){
    grid-column: 2 / 4;
}

.item:nth-of-type(8){
    grid-column: 2 / span 2; ->Se le especifica que tenga 2 espacios.
}

.item:nth-of-type(8){
    grid-column: 2 / -1; ->Se le especifica que tomará todas las columnas disponibles.
}

//DEFINIENDO EL TAMAÑO DE LAS FILAS DENTRO DE UN GRID.
.item:nth-of-type(1){
    grid-column: 1 / span 3;
    grid-row: 1 / span 2;
}

//DEFINIENDO EL NOMBRE DE LÍNEAS:

.container{
    display: grid;
    grid-template-colums: [inicio]1fr [linea2]1fr [linea3]1fr [destacado-end]1fr [linea5]1fr [destacado2-end]1fr 1fr[final];
    grid-template-rows: [inicio]200px [inicio2]200px [final];
    grid-gap: 5px;
    height: 100vh;

}

.item:nth-of-type(1){
    grid-column: inicio / destacado-end;
    grid-row: inicio / final;
}

.item:nth-of-type(2){
    grid-column: destacado-end / destacado2-end;
    grid-row: inicio / final;
}

.item:nth-of-type(3){
    grid-column: destacado2-end / final;
}

//MANEJANDO EL GRID IMPLÍCITO.

El grid implícito será el que contenga los elementos que 
no están integrados en las filas y columnas que especificamos
en css.

.container{
    display: grid;
    grid-template-colums: [inicio]1fr [linea2]1fr [linea3]1fr [destacado-end]1fr [linea5]1fr [destacado2-end]1fr 1fr[final];
    grid-template-rows: [inicio]200px [inicio2]200px [final];
    grid-gap: 5px;
    height: 100vh;
    //Se usa grid-auto-flow o grid-auto-columns, no los 2 al mismo tiempo
    grid-auto-flow: row; //Desplaza los elementos a filas.
    grid-auto-flow: column; //Desplaza los elementos a columnas.
    grid-auto-columns: 200px 50px 300px 1fr; //Crea las demás columnas adicionales a las que se establecen en el original.
    grid-auto-rows; 50px 100px; //Crea las filas que se van necesitando, en el orden en que le especificamos, por ejemplo, si se necesitan más filas, crea una de 50px, si se necesita otra más, se crea una fila de 100px, y así sucesivamente.

}

//ALINEACIÓN DE CONTENIDO
.container{
    display: grid;
    grid-gap: 5px;
    height: 100vh;
    grid-template-colums: repeat(3, 1fr);
    grid-template-rows: repeat(4, 1fr);
    justify-items:  //hace el alineado de forma horizontal
    align-items: //hace el alineado de forma vertical
}

.item-nth-of-type(5){
    align-self:
    justify-self: //recibe los valores específicos para el elemento.
}

//ALINEACION DE FILAS Y COLUMNAS
//Alinear todo el grid contenedor.
.container{
    display: grid;
    grid-gap: 5px;
    height: 100vh;
    grid-template-colums: repeat(3, 200px);
    grid-template-rows: repeat(4, 100px);
    
    //Propiedades alineación.
    //posibles valores: start, end, center, stretch, space-around, space-between y space-evenly;
    justify-content: 
    align-content:
}


*/



